=begin
We are going to create a BankAccount class. This class will recreate some of the common account transactions that normally occur for a bank account such as displaying your account number, checking and savings amount, total amount. Of course, there are also methods to invoke such as depositing a check, checking your balance, withdrawing money
=end

class BankAccount
    @@num_of_accounts = 0
	def initialize
		account_number
		@checking = 0
		@savings = 0
		@interest_rate = 0.01
	end

=begin
BankAccount should have a method that returns a user's account number, account number should be generated by a private method, account number should be random
=end
	def ret_account_number
		puts @account_number
		self
	end

=begin
BankAccount should have a method that returns the user's checking account balance
=end
	def checking_balance
		puts @checking
		self
	end

=begin
BankAccount should have a method that returns the user's saving account balance
=end
	def savings_balance
		puts @savings
		self
	end

=begin
BankAccount should allow a user to deposit money into either their checking or saving account
=end
	def deposit_checking(amt)
		@checking += amt
		self
	end

    	def deposit_savings(amt)
		@savings += amt
		self
	end
=begin
BankAccount should allow a user to withdraw money from one of their accounts, return an error if there are insufficient funds
=end
	def withdraw_checking(amt)
		if @checking < amt
			puts "Insufficient funds for checking account"
        else
			@checking -= amt
        end
        self
    end

	def withdraw_savings(amt)
		if @savings < amt
			puts "Insufficient funds for savings account"
        else
			@savings -= amt
        end
        self
    end
=begin
BankAccount should allow the user to view the total amount of money they have at the bank
=end
	def total_amount
		puts @savings + @checking
		self
	end
=begin
BankAccount should track how many accounts the bank currently has
=end

=begin
Add an interest_rate attribute that is not accessible by the user. Set it to 0.01
=end

=begin
BankAccount should have a method called account_information that displays the users account number, total money, checking account balance, saving account balance and interest rate
=end
	def account_information
		puts " Account Number: #{@account_number}. Total Money: #{@checking + @savings}. Checking Account Balance: #{@checking} .  Savings Account Balance: #{@savings}. Interest rate: #{@interest_rate}"
		self
	end
=begin
A user should not be able to set any attributes from the BankAccount class
=end
	private
		def account_number
			@account_number = rand(100000..999999)
		end
end

myAccount = BankAccount.new

myAccount.deposit_savings(1000).deposit_checking(2000).withdraw_savings(50).account_information